{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","className","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","main","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","temp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MAGMA,EACE,mCADFA,EAEE,2CA+FOC,MA5Ff,WAAgB,IAAD,EAEYC,mBAAS,IAFrB,mBAENC,EAFM,KAEAC,EAFA,OAIiBF,mBAAS,IAJ1B,mBAING,EAJM,KAIGC,EAJH,KAwCb,OACE,sBAAKC,UAAU,MAAf,UACA,+CACE,iCAIA,qBAAKA,UAAU,aAAf,SACA,uBACAC,KAAK,OACLD,UAAY,aACZE,YAAc,aACdC,SAAU,SAAAC,GAAC,OAAIP,EAASO,EAAEC,OAAOC,QACjCA,MAASV,EACTW,WAhDW,SAAAC,GAEG,UAAZA,EAAIC,KACNC,MAAM,GAAD,OAAIjB,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACzDkB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAGJf,EAAWe,GACXjB,EAAS,IAETkB,QAAQC,IAAIF,WA4CY,oBAAhBhB,EAAQmB,KAElB,gCAEA,sBAAKjB,UAAU,eAAf,UAEA,sBAAKA,UAAU,WAAf,cAA4BF,EAAQoB,KAApC,MAA6CpB,EAAQqB,IAAIC,WACzD,sBAAKpB,UAAU,OAAf,cA7CiB,SAACqB,GAEpB,IAKIC,EAFO,CAAC,SAAU,SAAS,UAAU,YAAY,WAAW,SAAU,YAE3DD,EAAEE,UAEbC,EAAOH,EAAEI,UAETC,EATS,CAAC,UAAU,WAAW,QAAQ,QAAQ,MAAM,OAAO,OAAO,SAAS,YAChF,UAAU,WAAW,YAQFL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GA+BRE,CAAY,IAAIC,YAIxC,sBAAK/B,UAAU,cAAf,UACA,sBAAKA,UAAU,OAAf,UACEgC,KAAKC,MAAMnC,EAAQmB,KAAKiB,MAD1B,WAKA,sBAAKlC,UAAU,UAAf,cAA2BF,EAAQA,QAAQ,GAAGmB,KAA9C,aAIM,UC9EGkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB1B,MAAK,YAAkD,IAA/C2B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.93a34e84.chunk.js","sourcesContent":["import './App.css';\nimport React , { useState } from 'react';\n\nconst api = {\n  key : \"d948164ecbc3774d76e65793280ea7f6\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n}\n\nfunction App() {\n\n  const [query,setQuery] = useState('');\n\n  const [weather, setWeather] = useState({});\n\n  const search = evt =>{\n\n    if (evt.key === \"Enter\"){\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n      .then(res => res.json())\n      .then(result => { \n\n\n        setWeather(result);\n        setQuery(''); \n\n        console.log(result)\n\n      });\n    }\n  }\n\n  const dateBuilder  = (d) => {\n\n    let months = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\n    \"October\",\"November\",\"December\"];\n\n    let days = [\"Sunday\" ,\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\", \"Saturday\"];\n\n    let day = days[d.getDay()];\n\n    let date = d.getDate();\n\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`\n\n  }\n  return (\n    <div className=\"app\">\n    <h1>  WEATHER APP</h1>\n      <main> \n      \n\n\n      <div className=\"search-box\">  \n      <input \n      type=\"text\" \n      className = \"search-bar\"\n      placeholder = \"Search....\"\n      onChange={e => setQuery(e.target.value)}\n      value = {query}\n      onKeyPress = {search}\n\n      /> \n\n      </div>\n\n      \n      { (typeof weather.main != \"undefined\") ? (\n\n      <div>\n\n      <div className=\"location-box\"> \n\n      <div className=\"location\"> {weather.name} , {weather.sys.country}</div>\n      <div className=\"date\"> {dateBuilder(new Date())}</div>\n\n      </div>\n\n      <div className=\"weather-box\">\n      <div className=\"temp\"> \n       {Math.round(weather.main.temp)}Â°C \n\n      </div>\n\n      <div className=\"weather\"> {weather.weather[0].main} </div>\n\n       </div>\n       </div>\n       ) : ('')}\n\n     \n\n\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}